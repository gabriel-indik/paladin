/*
 * Copyright Â© 2024 Kaleido, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

ext {
    goFiles = fileTree(".") {
        include "*.go"
    }
}

configurations {
    // Resolvable configurations
    contractCompile {
        canBeConsumed = false
        canBeResolved = true
    }
    toolkitGo {
        canBeConsumed = false
        canBeResolved = true
    }
    coreGo {
        canBeConsumed = false
        canBeResolved = true
    }
    notoGo {
        canBeConsumed = false
        canBeResolved = true
    }
    zetoGo {
        canBeConsumed = false
        canBeResolved = true
    }
    zetoArtifacts {
        canBeConsumed = false
        canBeResolved = true
    }
}

dependencies {
    contractCompile project(path: ":solidity", configuration: "compiledContracts")
    toolkitGo project(path: ":toolkit:go", configuration: "goSource")
    coreGo project(path: ":core:go", configuration: "goSource")
    notoGo project(path: ":domains:noto", configuration: "goSource")
    zetoGo project(path: ":domains:zeto", configuration: "goSource")
    zetoArtifacts project(path: ":domains:zeto", configuration: "zetoArtifacts")
}

task copySolidity(type: Copy) {
    inputs.files(configurations.contractCompile)
    from fileTree(configurations.contractCompile.asPath) {
        include 'contracts/domains/noto/NotoFactory.sol/NotoFactory.json'
        include 'contracts/domains/zeto/ZetoFactory.sol/ZetoFactory.json'
        include 'contracts/shared/Atom.sol/Atom.json'
        include 'contracts/shared/Atom.sol/AtomFactory.json'
        include 'contracts/private/Swap.sol/Swap.json'
    }

    inputs.files(configurations.zetoArtifacts)
    from fileTree(configurations.zetoArtifacts.asPath) {
        include 'artifacts/contracts/**/*.json'
        include 'artifacts/@iden3/contracts/**/*.json'
        exclude '**/*.dbg.json'
    }

    into 'helpers/abis'

    // Flatten all paths into the destination folder
    eachFile { path = name }
    includeEmptyDirs = false
}

task test(type: Exec, dependsOn: [":core:go:makeMocks"]) {
    inputs.files(configurations.toolkitGo)
    inputs.files(configurations.coreGo)
    inputs.files(configurations.notoGo)
    inputs.files(configurations.zetoGo)
    inputs.files(goFiles)
    inputs.files(copySolidity)
    outputs.dir('coverage')

    workingDir '.'
    executable 'go'
    args 'test'
    args './...'
    args '-v'
    args '-cover'
    args '-covermode=atomic'
    args '-timeout=60s'
    if (project.findProperty('verboseTests') == 'true') {
        args '-v'
    }
    args "-test.gocoverdir=${projectDir}/coverage"

    dependsOn ':testinfra:startTestInfra'
    helpers.dumpLogsOnFailure(it, ':testinfra:startTestInfra')
}

task build {
    dependsOn test
}

task clean(type: Delete) {
    delete 'coverage'
    delete 'helpers/abis'
}
