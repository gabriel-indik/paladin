/*
 * Copyright Â© 2024 Kaleido, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

ext {
    goFiles = fileTree(".") {
        include "internal/**/*.go"
        include "pkg/**/*.go"
    }
}

configurations {
    // Resolvable configurations
    contractCompile {
        canBeConsumed = false
        canBeResolved = true
    }
    toolkitGo {
        canBeConsumed = false
        canBeResolved = true
    }
    coreGo {
        canBeConsumed = false
        canBeResolved = true
    }

    // Consumable configurations
    goSource {
        canBeConsumed = true
        canBeResolved = false
    }
    libnoto {
        canBeConsumed = true
        canBeResolved = false
    }
}

dependencies {
    contractCompile project(path: ":solidity", configuration: "compiledContracts")
    toolkitGo project(path: ":toolkit:go", configuration: "goSource")
    coreGo project(path: ":core:go", configuration: "goSource")
}

task copySolidity(type: Copy) {
    inputs.files(configurations.contractCompile)
    into projectDir

    into('internal/noto/abis') {
        from fileTree(configurations.contractCompile.asPath) {
            include 'contracts/domains/interfaces/INoto.sol/INoto.json'
            include 'contracts/domains/noto/NotoFactory.sol/NotoFactory.json'
            include 'contracts/domains/noto/Noto.sol/Noto.json'
            include 'contracts/domains/noto/NotoSelfSubmit.sol/NotoSelfSubmit.json'
            include 'contracts/private/interfaces/INotoHooks.sol/INotoHooks.json'
        }
        eachFile { path = 'internal/noto/abis/' + name }
    }

    into('pkg/types/abis') {
        from fileTree(configurations.contractCompile.asPath) {
            include 'contracts/domains/interfaces/INotoPrivate.sol/INotoPrivate.json'
        }
        eachFile { path = 'pkg/types/abis/' + name }
    }

    includeEmptyDirs = false
}

task test(type: Exec, dependsOn: [":core:go:makeMocks", copySolidity]) {
    inputs.files(configurations.toolkitGo)
    inputs.files(configurations.coreGo)
    inputs.files(goFiles)
    outputs.dir('coverage')

    workingDir '.'
    executable 'go'
    args 'test'
    args './internal/...'
    args './pkg/...'
    args '-cover'
    args '-covermode=atomic'
    args '-timeout=90s'
    if (project.findProperty('verboseTests') == 'true') {
        args '-v'
    }
    args "-test.gocoverdir=${projectDir}/coverage"

    dependsOn ':testinfra:startTestInfra'
    helpers.dumpLogsOnFailure(it, ':testinfra:startTestInfra')
}

task buildGo(type: GoLib, dependsOn: [":toolkit:go:protoc", copySolidity]) {
    inputs.files(configurations.coreGo)
    inputs.files(configurations.toolkitGo)
    baseName "noto"
    sources goFiles
    mainFile 'noto.go'
}

task build {
    dependsOn test
}

task clean(type: Delete) {
    delete "${buildDir}"
    delete 'coverage'
    delete 'internal/noto/abis'
}

task assemble {
    dependsOn buildGo
}

dependencies {
    libnoto files(buildGo)
    goSource files(goFiles, copySolidity)
}
