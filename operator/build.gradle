/*
 * Copyright Â© 2024 Kaleido, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

configurations {
    // Resolvable configurations
    contractCompile {
        canBeConsumed = false
        canBeResolved = true
    }
}

dependencies {
    contractCompile project(path: ":solidity", configuration: "compiledContracts")
}

ext {
    namespace = project.hasProperty('namespace') ? project.namespace : 'default' // Default namespace is 'default' 
    deleteCluster = project.hasProperty('deleteCluster') ? project.deleteCluster.toBoolean() : false // By default, do not delete the cluster
    buildPaladin = project.hasProperty('buildPaladin') ? project.buildPaladin == 'true' : true // Default is to build Paladin
    buildOperator = project.hasProperty('buildOperator') ? project.buildOperator == 'true' : true // Default is to build the operator
}

task copySolidity(type: Copy) {
    inputs.files(configurations.contractCompile)
    from fileTree(configurations.contractCompile.asPath) {
        include 'contracts/domains/noto/NotoFactory.sol/NotoFactory.json'
        include 'contracts/domains/pente/PenteFactory.sol/PenteFactory.json'
    }
    into 'test/e2e/abis'

    // Flatten all paths into the destination folder
    eachFile { path = name }
    includeEmptyDirs = false
}

// Task to build the Paladin image from the parent project
task buildPaladinImage {
    dependsOn ':docker' // Builds the Paladin image in the parent project
    
    onlyIf {
        buildPaladin
    }
}

// Task to build the operator Docker image
task docker(type: Exec) {
    executable 'make'
    args 'docker-build'
}

// Task to build the Paladin image from the parent project
task buildOperatorImage {
    dependsOn ':operator:docker' // Builds the Paladin image in the parent project
    
    onlyIf {
        buildPaladin
    }
}

// Task to start the Kind cluster
task startKindCluster(type: Exec) {
    executable 'make'
    args 'kind-start'
}

// Task to load images into the Kind cluster
task promoteKindImages(type: Exec, dependsOn: [
    startKindCluster,
    buildPaladinImage,
    buildOperatorImage
]) {
    executable 'make'
    args 'kind-promote'
}

// Task to install Helm CRDs
task installCrds(type: Exec, dependsOn: [startKindCluster]){
    executable 'make'
    args 'install-crds'
}

// Task to install the operator using Helm
task installOperator(type: Exec, dependsOn: [installCrds, promoteKindImages]) {
    executable 'make'
    args 'helm-install'
    args "NAMESPACE=${namespace}"
}

// Task to verify the operator is running in the 'paladin' namespace
task verifyOperator(dependsOn: installOperator) {
    doLast {
        println 'Waiting for operator deployment to become ready...'
        def process = ['kubectl', 'wait', '--for=condition=available', 'deployment/paladin-operator', '-n', "${namespace}", '--timeout=60s'].execute()
        process.waitFor()
        def output = process.in.text.trim()
        def errorOutput = process.err.text.trim()

        if (process.exitValue() == 0) {
            println 'Operator deployment is ready.'
        } else {
            println errorOutput
            panic 'Operator deployment did not become ready in the expected time.'
        }
    }
}


// Task to create the nodes
task createNode(type: Exec, dependsOn: verifyOperator) {
    executable 'make'
    args 'create-node'
    args "NAMESPACE=${namespace}"
}

// The 'deplay' runs the whole flow
task deploy(dependsOn: createNode) {
    doLast {
        println 'Deplopy setup completed. Operator is running in the paladin namespace.'
    }
}

// The 'e2e' task runs the whole flow
task e2e(dependsOn: deploy) {
    doLast {
        println 'TODO: Run E2E tests'
     }
}

// Task to run E2E tests (if needed)
task runE2ETests(type: Exec, dependsOn: e2e) {
    executable 'make'
    args 'test-e2e'
}

// Task to clean up resources
task cleanCluster(type: Exec) {
    executable 'make'
    args 'clean'
    args "NAMESPACE=${namespace}"
    args "DELETE_CLUSTER=${deleteCluster}"
}

task clean {
    dependsOn cleanCluster
}
// Default 'build' task
task build {
    dependsOn docker
}

// Existing 'make' task
task make(type: Exec, dependsOn: [copySolidity]) {
    executable 'make'
}
